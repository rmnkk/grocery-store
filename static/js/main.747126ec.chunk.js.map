{"version":3,"sources":["components/NewGood/NewGood.js","components/Good/Good.js","constants/FILTER.js","constants/OPTIONS.js","components/GoodsList/GoodsList.js","components/GoodsFilter/GoodsFilter.js","components/GroceryApp/GroceryApp.js","App.js","serviceWorker.js","index.js"],"names":["NewGood","onGoodAddition","useState","inputValue","setInputValue","selectValue","setSelectValue","onSubmit","e","preventDefault","value","type","className","placeholder","onChange","target","trimLeft","event","handleSelectChange","Good","id","title","status","priority","date","onGoodStatusChange","onGoodDeletion","onClick","FILTER","OPTIONS","month","day","weekday","timezone","hour","minute","second","GoodsList","goods","setGoods","filterValue","filteredGoods","useMemo","filter","good","sort","a","b","localeCompare","handleGoodStatusChange","map","Date","toLocaleString","handleGoodDeletion","key","GoodsFilter","setFilterValue","innerText","GroceryApp","useEffect","localStorage","getItem","JSON","parse","setItem","stringify","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.747126ec.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport PropTypes from 'prop-types'\n\nexport const NewGood = ({ onGoodAddition }) => {\n    const [inputValue, setInputValue] = useState('');\n    const [selectValue, setSelectValue] = useState('');\n\n    const handleSelectChange = (event) => {\n        const { value } = event.target;\n\n        setSelectValue(value);\n    }\n\n    return (\n        <form\n            onSubmit={(e) => {\n                e.preventDefault();\n\n                onGoodAddition(inputValue, +selectValue);\n\n                setInputValue('');\n                setSelectValue('');\n            }}\n        >\n            <input\n                value={inputValue}\n                type=\"text\"\n                className=\"new-good\"\n                placeholder=\"Please, enter your good title here\"\n                onChange={e => setInputValue(e.target.value.trimLeft())}\n            />\n\n            <select value={selectValue} onChange={(e) => handleSelectChange(e)}>\n                <option value=\"\">Select priority</option>\n                <option value=\"1\">1</option>\n                <option value=\"2\">2</option>\n                <option value=\"3\">3</option>\n                <option value=\"4\">4</option>\n                <option value=\"5\">5</option>\n            </select>\n\n            <button type={\"submit\"}>\n                Add good to the grocery list\n            </button>\n        </form>\n    )\n}\n\nNewGood.propTypes = {\n    onGoodAddition: PropTypes.func.isRequired,\n}\n","import React from \"react\";\nimport PropTypes from 'prop-types';\n\nexport const Good = ({\n   id,\n   title,\n   status,\n   priority,\n   date,\n   onGoodStatusChange,\n   onGoodDeletion\n}) => (\n    <li>\n        <span>\n            {`We ${status ? 'have' : \"ran out of \"} ${title} | Priority is: ${priority} |`}\n        </span>\n        <span>\n            {`Status was changed at ${date}`}\n        </span>\n        <button onClick={() => onGoodStatusChange(id)}>\n            Change good status\n        </button>\n        <button onClick={() => onGoodDeletion(id)}>X</button>\n    </li>\n)\n\nGood.propTypes = {\n    id: PropTypes.number.isRequired,\n    title: PropTypes.string.isRequired,\n    status: PropTypes.bool.isRequired,\n    priority: PropTypes.number.isRequired,\n    onGoodStatusChange: PropTypes.func.isRequired,\n    onGoodDeletion: PropTypes.func.isRequired,\n}\n","export const FILTER = {\n    all: 'All',\n    have: 'Have',\n    runOut: 'Run out'\n}\n","export const OPTIONS = {\n    month: 'long',\n    day: 'numeric',\n    weekday: 'long',\n    timezone: 'UTC',\n    hour: 'numeric',\n    minute: 'numeric',\n    second: 'numeric'\n};\n","import React, {useMemo} from \"react\";\nimport PropTypes from 'prop-types';\nimport { Good } from \"../Good\";\nimport { FILTER } from '../../constants/FILTER';\nimport {OPTIONS} from \"../../constants/OPTIONS\";\n\nexport const GoodsList = ({goods, setGoods, filterValue}) => {\n    const filteredGoods = useMemo(() => {\n        switch (filterValue) {\n            case FILTER.have:\n                return goods\n                    .filter(good => good.status)\n                    .sort((a, b) => a.title.localeCompare(b.title));\n            case FILTER.runOut:\n                return goods\n                    .filter(good => !good.status)\n                    .sort((a, b) => a.title.localeCompare(b.title));\n            default:\n                return goods.sort((a, b) => a.priority - b.priority)\n        }\n    }, [filterValue, goods]);\n\n    const handleGoodStatusChange = (id) => {\n        setGoods(goods.map(good => {\n            if (good.id === id) {\n                return {\n                    ...good,\n                    date: new Date().toLocaleString(\"en-US\", OPTIONS),\n                    status: !good.status,\n                };\n            }\n\n            return { ...good };\n        }));\n    };\n\n    const handleGoodDeletion = (id) => {\n        setGoods(goods.filter(good => good.id !== id));\n    };\n\n    return (\n        <ul>\n            {filteredGoods.map(good => (\n                <Good\n                    onGoodStatusChange={handleGoodStatusChange}\n                    onGoodDeletion={handleGoodDeletion}\n                    key={good.id}\n                    {...good}\n                />\n            ))}\n        </ul>\n    );\n};\n\n\nGoodsList.propTypes = {\n    goods: PropTypes.arrayOf(\n        PropTypes.shape({\n            id: PropTypes.number.isRequired,\n            title: PropTypes.string.isRequired,\n            status: PropTypes.bool.isRequired,\n            priority: PropTypes.number.isRequired,\n        }).isRequired\n    ).isRequired,\n    setGoods: PropTypes.func.isRequired,\n}\n","import React from \"react\";\nimport PropTypes from 'prop-types';\n\nexport const GoodsFilter = ({ setFilterValue }) => {\n    return (\n        <div>\n            <button\n                onClick={e => setFilterValue(e.target.innerText)}\n            >\n                All\n            </button>\n            <button\n                onClick={e => setFilterValue(e.target.innerText)}\n            >\n                Have\n            </button>\n            <button\n                onClick={e => setFilterValue(e.target.innerText)}\n            >\n                Run out\n            </button>\n        </div>\n    );\n};\n\nGoodsFilter.propTypes = {\n    setFilterValue: PropTypes.func.isRequired,\n}\n","import React, { useState, useEffect } from 'react';\nimport { NewGood } from \"../NewGood\";\nimport \"./GroceryApp.scss\";\nimport { GoodsList } from \"../GoodsList\";\nimport {GoodsFilter} from \"../GoodsFilter\";\nimport {OPTIONS} from \"../../constants/OPTIONS\";\n\nexport const GroceryApp = () => {\n    const [goods, setGoods] = useState([]);\n    const [filterValue, setFilterValue] = useState();\n\n    useEffect(() => {\n        if (localStorage.getItem('goods')) {\n            setGoods([...JSON.parse(localStorage.getItem('goods'))]);\n        }\n    }, []);\n\n    useEffect(() => {\n        localStorage.setItem('goods', JSON.stringify(goods));\n    }, [goods]);\n\n    const handleGoodAddition = (title, priority) => {\n        if (title) {\n            setGoods([...goods, {\n                id: +new Date(),\n                title,\n                status: false,\n                priority,\n                date: new Date().toLocaleString(\"en-US\", OPTIONS),\n            }]);\n        }\n    };\n\n    return (\n        <section className=\"groceryapp\">\n            <header>\n                <h1>Grocery App</h1>\n\n                <NewGood\n                    onGoodAddition={handleGoodAddition}\n                />\n            </header>\n\n            <section>\n                <GoodsList\n                    goods={goods}\n                    setGoods={setGoods}\n                    filterValue={filterValue}\n                />\n\n                <GoodsFilter setFilterValue={setFilterValue}/>\n            </section>\n        </section>\n    );\n};\n","import React from 'react';\nimport './styles/App.css';\nimport {GroceryApp} from \"./components/GroceryApp\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <GroceryApp />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\nserviceWorker.unregister();\n"],"sourceRoot":""}